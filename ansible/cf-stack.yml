Parameters:
  Name:
    Type: String
  Stage:
    Type: String
    AllowedValues:
      - prod
      - dev
    Default: dev
  ElbCert:
    Type: String
  WebUrl:
    Type: String
  HostedZoneName:
    Type: String
  MySqlAdminPass:
    Type: String

Mappings:
  StageToResource:
    dev:
      Region: eu-central-1
      ApiInstanceType: t2.micro
      ApiAMI: ami-0d1ddd83282187d18
      RdsInstanceType: db.t2.micro

Resources:
  VPCPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Sub:
          - ${Region}a
          - Region: !Ref AWS::Region
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: VPCNetwork
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${Name}-sb-pub-1

  VPCPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Sub:
          - ${Region}b
          - Region: !Ref AWS::Region
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: VPCNetwork
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${Name}-sb-pub-2

  HttpSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow worldwide access to HTTP/S protocols"
      GroupName:
        Fn::Sub: ${Name}-http-sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      VpcId:
        Ref: VPCNetwork

  SshSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow worldwide access to SSH protocol"
      GroupName:
        Fn::Sub: ${Name}-ssh-sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId:
        Ref: VPCNetwork

  MysqlSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow EC2 instances to access MySQL"
      GroupName:
        Fn::Sub: ${Name}-mysql-sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId:
            Ref: HttpSecurityGroup
      VpcId:
        Ref: VPCNetwork

  VPCNetwork:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${Name}-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${Name}-igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPCNetwork
      InternetGatewayId:
        Ref: InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCNetwork
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${Name}-rt

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: RouteTable

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RouteTable
      SubnetId:
        Ref: VPCPublicSubnet1

  PublicSubne2tRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RouteTable
      SubnetId:
        Ref: VPCPublicSubnet2

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name:
        Fn::Sub: ${Name}-elb
      Scheme: internet-facing
      SecurityGroups:
        - Ref: HttpSecurityGroup
      Subnets:
        - Ref: VPCPublicSubnet1
        - Ref: VPCPublicSubnet2
      Type: application

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: 443
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 80
      Protocol: HTTP

  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref ElbCert
      DefaultActions:
        - Type: "forward"
          TargetGroupArn:
            Ref: TargetGroup
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 443
      Protocol: HTTPS

  ElbDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName:
          Fn::GetAtt:
            - LoadBalancer
            - DNSName
        EvaluateTargetHealth: false
        HostedZoneId:
          Fn::GetAtt:
            - LoadBalancer
            - CanonicalHostedZoneID
      HostedZoneName:
        Fn::Sub: ${HostedZoneName}.
      Name:
        Ref: WebUrl
      Type: A

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /
      HealthCheckPort: 443
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 3
      HealthyThresholdCount: 3
      IpAddressType: ipv4
      Name:
        Fn::Sub: ${Name}-api-tg
      Port: 443
      Protocol: HTTPS
      Targets:
        - Id:
            Ref: ApiInstance1
        - Id:
            Ref: ApiInstance2
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId:
        Ref: VPCNetwork

  ApiInstance1:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeType: "gp2"
            DeleteOnTermination: true
            VolumeSize: "20"
      ImageId:
        Fn::FindInMap:
          - StageToResource
          - Ref: Stage
          - ApiAMI
      InstanceType:
        Fn::FindInMap:
          - StageToResource
          - Ref: Stage
          - ApiInstanceType
      SecurityGroupIds:
        - Ref: HttpSecurityGroup
        - Ref: SshSecurityGroup
      SubnetId:
        Ref: VPCPublicSubnet1
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${Name}-api-1

  ApiInstance2:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeType: "gp2"
            DeleteOnTermination: true
            VolumeSize: "20"
      ImageId:
        Fn::FindInMap:
          - StageToResource
          - Ref: Stage
          - ApiAMI
      InstanceType:
        Fn::FindInMap:
          - StageToResource
          - Ref: Stage
          - ApiInstanceType
      SecurityGroupIds:
        - Ref: HttpSecurityGroup
        - Ref: SshSecurityGroup
      SubnetId:
        Ref: VPCPublicSubnet1
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${Name}-api-2

  RdsSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Public Subnets
      DBSubnetGroupName:
        Fn::Sub: ${Name}-rds-sbg
      SubnetIds:
        - Ref: VPCPublicSubnet1
        - Ref: VPCPublicSubnet2

  ApiRDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 100
      BackupRetentionPeriod: 5
      DBInstanceClass:
        Fn::FindInMap:
          - StageToResource
          - dev
          - RdsInstanceType
      DBInstanceIdentifier:
        Fn::Sub: ${Name}-mysql
      DBSecurityGroups:
        - Ref: MysqlSecurityGroup
      DBSubnetGroupName:
        Ref: RdsSubnetGroup
      EnableCloudwatchLogsExports:
        - general
        - audit
        - error
        - slowquery
      Engine: mysql
      EngineVersion: 8.0
      MasterUsername: "practice_admin"
      MasterUserPassword:
        Ref: MySqlAdminPass
      MonitoringInterval: 5
      MultiAZ: false
      NetworkType: ipv4
      Port: 3306
      PubliclyAccessible: false
      StorageEncrypted: true
      StorageType: gp2

Outputs:
  RDSEndpointAddr:
    Description: RDS instance endpoint address
    Value:
      Fn::GetAtt:
        - ApiRDSInstance
        - Endpoint.Address
  RDSEndpointPort:
    Description: RDS instance endpoint port
    Value:
      Fn::GetAtt:
        - ApiRDSInstance
        - Endpoint.Port
  WebURL:
    Description: URL of the web app
    Value:
      Ref: WebUrl
  Region:
    Description: Region
    Value:
      Ref: AWS::Region

